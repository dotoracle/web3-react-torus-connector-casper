{"version":3,"file":"dotoracle-web3-react-torus-connector.cjs.production.min.js","sources":["../src/index.ts"],"sourcesContent":["import { AbstractConnector } from '@web3-react/abstract-connector'\nimport { ConnectorUpdate } from '@web3-react/types'\n\ninterface TorusConnectorArguments {\n  chainId: number\n  initOptions?: any\n  constructorOptions?: any\n  loginOptions?: any\n}\n\nexport class TorusConnector extends AbstractConnector {\n  private readonly chainId: number\n  private readonly initOptions: any\n  private readonly constructorOptions: any\n  private readonly loginOptions: any\n\n  public torus: any\n\n  constructor({ chainId, initOptions = {}, constructorOptions = {}, loginOptions = {} }: TorusConnectorArguments) {\n    super({ supportedChainIds: [chainId] })\n\n    this.chainId = chainId\n    this.initOptions = initOptions\n    this.constructorOptions = constructorOptions\n    this.loginOptions = loginOptions\n  }\n\n  public async activate(): Promise<ConnectorUpdate> {\n    if (!this.torus) {\n      const Torus = await import('@toruslabs/casper-embed').then(m => m?.default ?? m)\n      this.torus = new Torus(this.constructorOptions)\n      await this.torus.init(this.initOptions)\n    }\n\n    const account = await this.torus.login(this.loginOptions).then((accounts: string[]): string => accounts[0])\n\n    return { provider: this.torus.provider, account }\n  }\n\n  public async getProvider(): Promise<any> {\n    return this.torus.provider\n  }\n\n  public async getChainId(): Promise<number | string> {\n    return this.chainId\n  }\n\n  public async getAccount(): Promise<null | string> {\n    return this.torus.ethereum.request({ method: 'eth_accounts' }).then((accounts: string[]): string => accounts[0])\n  }\n\n  public async deactivate() {}\n\n  public async close() {\n    await this.torus.cleanUp()\n    this.torus = undefined\n    this.emitDeactivate()\n  }\n}\n"],"names":["chainId","initOptions","constructorOptions","loginOptions","supportedChainIds","activate","_this3","torus","login","then","accounts","account","provider","this","m","Torus","init","getProvider","getChainId","getAccount","ethereum","request","method","deactivate","close","_this11","cleanUp","undefined","emitDeactivate","AbstractConnector"],"mappings":"wNAkBgBA,IAAAA,YAASC,YAAAA,aAAc,SAAIC,mBAAAA,aAAqB,SAAIC,aAAAA,aAAe,0BACzE,CAAEC,kBAAmB,CAACJ,YAEvBA,QAAUA,IACVC,YAAcA,IACdC,mBAAqBA,IACrBC,aAAeA,+GAGTE,gEAOWC,EAAKC,MAAMC,MAAMF,EAAKH,cAAcM,MAAK,SAACC,UAA+BA,EAAS,sBAAlGC,SAEC,CAAEC,SAAUN,EAAKC,MAAMK,SAAUD,QAAAA,SARnCE,sBAAAP,EAAKC,6BACY,8QAAO,gCAA2BE,MAAK,SAAAK,+BAAKA,SAAAA,aAAcA,qBAAxEC,YACDR,MAAQ,IAAIQ,EAAMT,EAAKJ,oCACtBI,EAAKC,MAAMS,KAAKV,EAAKL,+HAQlBgB,kDACJJ,KAAKN,MAAMK,gDAGPM,iDACJL,KAAKb,+CAGDmB,iDACJN,KAAKN,MAAMa,SAASC,QAAQ,CAAEC,OAAQ,iBAAkBb,MAAK,SAACC,UAA+BA,EAAS,6CAGlGa,kDAEAC,2BACLX,4BAAAY,EAAKlB,MAAMmB,8BACZnB,WAAQoB,IACRC,2DA9C2BC"}