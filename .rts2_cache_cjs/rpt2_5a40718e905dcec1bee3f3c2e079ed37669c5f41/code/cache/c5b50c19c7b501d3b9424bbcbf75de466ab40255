{"code":"import { AbstractConnector } from '@web3-react/abstract-connector';\r\nexport class TorusConnector extends AbstractConnector {\r\n    constructor({ chainId, initOptions = {}, constructorOptions = {}, loginOptions = {} }) {\r\n        super({ supportedChainIds: [chainId] });\r\n        this.chainId = chainId;\r\n        this.initOptions = initOptions;\r\n        this.constructorOptions = constructorOptions;\r\n        this.loginOptions = loginOptions;\r\n    }\r\n    async activate() {\r\n        if (!this.torus) {\r\n            const Torus = await import('@toruslabs/casper-embed').then(m => m?.default ?? m);\r\n            this.torus = new Torus(this.constructorOptions);\r\n            await this.torus.init(this.initOptions);\r\n        }\r\n        const account = await this.torus.login(this.loginOptions).then((accounts) => accounts[0]);\r\n        return { provider: this.torus.provider, account };\r\n    }\r\n    async getProvider() {\r\n        return this.torus.provider;\r\n    }\r\n    async getChainId() {\r\n        return this.chainId;\r\n    }\r\n    async getAccount() {\r\n        return this.torus.ethereum.request({ method: 'eth_accounts' }).then((accounts) => accounts[0]);\r\n    }\r\n    async deactivate() { }\r\n    async close() {\r\n        await this.torus.cleanUp();\r\n        this.torus = undefined;\r\n        this.emitDeactivate();\r\n    }\r\n}\r\n//# sourceMappingURL=index.js.map","references":["/Volumes/DATA/Git/web3-react-torus-connector-casper/node_modules/@web3-react/abstract-connector/dist/index.d.ts","/Volumes/DATA/Git/web3-react-torus-connector-casper/node_modules/@web3-react/types/dist/index.d.ts","/Volumes/DATA/Git/web3-react-torus-connector-casper/node_modules/@toruslabs/casper-embed/dist/types/index.d.ts"],"map":"{\"version\":3,\"file\":\"index.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../src/index.ts\"],\"names\":[],\"mappings\":\"AAAA,OAAO,EAAE,iBAAiB,EAAE,MAAM,gCAAgC,CAAA;AAUlE,MAAM,OAAO,cAAe,SAAQ,iBAAiB;IAQnD,YAAY,EAAE,OAAO,EAAE,WAAW,GAAG,EAAE,EAAE,kBAAkB,GAAG,EAAE,EAAE,YAAY,GAAG,EAAE,EAA2B;QAC5G,KAAK,CAAC,EAAE,iBAAiB,EAAE,CAAC,OAAO,CAAC,EAAE,CAAC,CAAA;QAEvC,IAAI,CAAC,OAAO,GAAG,OAAO,CAAA;QACtB,IAAI,CAAC,WAAW,GAAG,WAAW,CAAA;QAC9B,IAAI,CAAC,kBAAkB,GAAG,kBAAkB,CAAA;QAC5C,IAAI,CAAC,YAAY,GAAG,YAAY,CAAA;IAClC,CAAC;IAEM,KAAK,CAAC,QAAQ;QACnB,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE;YACf,MAAM,KAAK,GAAG,MAAM,MAAM,CAAC,yBAAyB,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,OAAO,IAAI,CAAC,CAAC,CAAA;YAChF,IAAI,CAAC,KAAK,GAAG,IAAI,KAAK,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAA;YAC/C,MAAM,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,CAAA;SACxC;QAED,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,IAAI,CAAC,CAAC,QAAkB,EAAU,EAAE,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAA;QAE3G,OAAO,EAAE,QAAQ,EAAE,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,OAAO,EAAE,CAAA;IACnD,CAAC;IAEM,KAAK,CAAC,WAAW;QACtB,OAAO,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAA;IAC5B,CAAC;IAEM,KAAK,CAAC,UAAU;QACrB,OAAO,IAAI,CAAC,OAAO,CAAA;IACrB,CAAC;IAEM,KAAK,CAAC,UAAU;QACrB,OAAO,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE,MAAM,EAAE,cAAc,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,QAAkB,EAAU,EAAE,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAA;IAClH,CAAC;IAEM,KAAK,CAAC,UAAU,KAAI,CAAC;IAErB,KAAK,CAAC,KAAK;QAChB,MAAM,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,CAAA;QAC1B,IAAI,CAAC,KAAK,GAAG,SAAS,CAAA;QACtB,IAAI,CAAC,cAAc,EAAE,CAAA;IACvB,CAAC;CACF\"}","dts":{"name":"/Volumes/DATA/Git/web3-react-torus-connector-casper/src/index.d.ts","writeByteOrderMark":false,"text":"import { AbstractConnector } from '@web3-react/abstract-connector';\r\nimport { ConnectorUpdate } from '@web3-react/types';\r\ninterface TorusConnectorArguments {\r\n    chainId: number;\r\n    initOptions?: any;\r\n    constructorOptions?: any;\r\n    loginOptions?: any;\r\n}\r\nexport declare class TorusConnector extends AbstractConnector {\r\n    private readonly chainId;\r\n    private readonly initOptions;\r\n    private readonly constructorOptions;\r\n    private readonly loginOptions;\r\n    torus: any;\r\n    constructor({ chainId, initOptions, constructorOptions, loginOptions }: TorusConnectorArguments);\r\n    activate(): Promise<ConnectorUpdate>;\r\n    getProvider(): Promise<any>;\r\n    getChainId(): Promise<number | string>;\r\n    getAccount(): Promise<null | string>;\r\n    deactivate(): Promise<void>;\r\n    close(): Promise<void>;\r\n}\r\nexport {};\r\n"}}
